{"version":3,"sources":["components/form.js","components/todo.js","components/todoList.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["Form","textInput","setInputText","todos","setTodos","setFilter","onChange","e","target","value","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","HomePage","props","useState","setFilteredTodos","useEffect","localStorage","getItem","todoLocal","JSON","parse","setItem","stringify","getLocalStorage","filterHandler","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a769008d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({ textInput, setInputText, todos, setTodos, setFilter }) => {\r\n\r\n    const inputTextHandler = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputText(e.target.value);\r\n    };\r\n\r\n    const submitTodoHandler = (e) => {\r\n        e.preventDefault();\r\n        setTodos([...todos, {\r\n            text: textInput, \r\n            completed: false, \r\n            id: Math.random() * 1000\r\n        }]);\r\n        setInputText(\"\");\r\n    };\r\n\r\n    const filterHandler = (e) => {\r\n        // console.log(e.target.value);\r\n        setFilter(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <form>\r\n            <input onChange={inputTextHandler} value={textInput} type=\"text\" className=\"todo-input\"/>\r\n            <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select name=\"todos\" className=\"filter-todo\" onChange={filterHandler}>\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Todo = ({text, todo, todos, setTodos}) => {\r\n\r\n    const deleteHandler = () => {\r\n        // console.log(todo);\r\n        setTodos(todos.filter(el => el.id !== todo.id));\r\n    };\r\n\r\n    const completeHandler = () => {\r\n        setTodos(todos.map((item) => {\r\n            if (item.id === todo.id) {\r\n                return {\r\n                    ...item,\r\n                    completed: !item.completed\r\n                }\r\n            }\r\n            return item;\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div className='todo'>\r\n            <li className={`todo-item ${todo.completed ? 'completed' : ''}`}>\r\n                {text}\r\n            </li>\r\n            <button className='complete-btn' onClick={completeHandler}>\r\n                <i className='fas fa-check'></i>\r\n            </button>\r\n            <button className='trash-btn' onClick={deleteHandler}>\r\n                <i className='fas fa-trash'></i>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Todo from './todo';\r\n\r\nconst TodoList = ({todos, setTodos, filteredTodos}) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {\r\n                    filteredTodos.map(todo => (\r\n                        <Todo\r\n                            todos={todos} \r\n                            setTodos={setTodos}\r\n                            key={todo.id} \r\n                            text={todo.text} \r\n                            id={todo.id}\r\n                            todo={todo}\r\n                        />\r\n                    ))\r\n                }\r\n            </ul>              \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoList;","import React, { useState, useEffect } from 'react';\r\nimport Form from '../components/form';\r\nimport TodoList from '../components/todoList';\r\n\r\nconst HomePage = (props) => {\r\n\r\n    const [textInput, setInputText] = useState(\"\");\r\n    const [todos, setTodos] = useState([]);\r\n    const [filter, setFilter] = useState('All');\r\n    const [filteredTodos, setFilteredTodos] = useState([]);\r\n\r\n    const filterHandler = () => {\r\n        switch(filter) {\r\n            case 'completed': \r\n                setFilteredTodos(todos.filter(todo => todo.completed === true));\r\n                break;\r\n            case 'uncompleted':\r\n                setFilteredTodos(todos.filter(todo => todo.completed === false));\r\n                break;\r\n            default:\r\n                setFilteredTodos(todos);\r\n                break;\r\n        }\r\n    };\r\n\r\n    const saveLocalStorage = () => {        \r\n        localStorage.setItem('todos', JSON.stringify(todos));        \r\n    };\r\n\r\n    const getLocalStorage = () => {\r\n        if (!localStorage.getItem('todos')) {\r\n            localStorage.setItem('todos', JSON.stringify([]));\r\n        } else {\r\n            let todoLocal = JSON.parse(localStorage.getItem('todos'));\r\n            setTodos(todoLocal);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getLocalStorage();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        filterHandler();\r\n        saveLocalStorage();\r\n        //eslint-disable-next-line\r\n    }, [todos, filter]);\r\n\r\n    return (\r\n        <>\r\n        <header>\r\n            <h1>Ivan's Todo list</h1>\r\n        </header>\r\n        <Form \r\n            todos={todos} \r\n            setTodos={setTodos} \r\n            textInput={textInput} \r\n            setInputText={setInputText} \r\n            setFilter={setFilter}            \r\n        />\r\n        <TodoList todos={todos} setTodos={setTodos} filteredTodos={filteredTodos}/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default HomePage;","import React from 'react';\nimport './App.css';\n\nimport Home from './pages/home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n         <Home />   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}